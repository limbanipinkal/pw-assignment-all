# -*- coding: utf-8 -*-
"""data toolkit practice questions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_Mt3T8dB8LpbwM_60V4gG3TT6b4J3TWd
"""

## data toolkit practice question ###

#Demonstrate three different methods for creating identical 2D arrays in NumPy
# Provide the code for each method and the final output after each method


import numpy as np

# Method 1: Using np.array()
arr1 = np.array([[1, 2, 3], [4, 5, 6]])
print("Method 1 - np.array():\n", arr1)

# Method 2: Using np.zeros() and then filling with values
arr2 = np.zeros((2, 3), dtype=int)
arr2[0, :] = [1, 2, 3]
arr2[1, :] = [4, 5, 6]
print("Method 2 - np.zeros() and filling:\n", arr2)

# Method 3: Using np.full()
arr3 = np.full((2, 3), [1, 2, 3], dtype=int)
arr3[1, :] = [4, 5, 6]
print("Method 3 - np.full():\n", arr3)

import numpy as np

# Method 1
a = np.array([[1, 2], [3, 4]])
print(a)

# Method 2
b = np.array([[1, 2], [3, 4]])
print(b)

# Method 3
c = np.array([[1, 2], [3, 4]])
print(c)

#2. Using the Numpy function, generate an array of wRR evenly spaced numPers Petween w and wR and
# Reshape that wD array into a 2D array

import numpy as np
arr=np.linspace(1,10,10)
arr_2d=arr.reshape(2,5)
print(arr_2d)

#3 Explain the following termsg
M The difference in npYarray, npYasarray and npYasanyarrayX
M The difference between Deep copy and shallow copy


# np.array,np.asarray,np.asanyarray:
#- these three numpy function are used to convert input to numpy arrays but they differ in how
they handle exisiting array:

*np.array(): this function always create a new copy of the input even if its already this ensures that modification to the new array dont affect the
original input . think of it as creating a independent duplicate.


*-np.asarray():
this functions is more efficient.it only convert the input to anumpy array if it isnt already an ndarray its returned as is without creating a copy .this is like checking if
you already have the right tool and only getting a new one if you dont.else

*-np.asanyarray():
-this function is similar to np. asarray(), but its more flexible it works with subclasses of ndarray as well.



# The difference between Deep copy and shallow copy
-*DEEP COPY:
creates a completely independent copy of the original object and all its nested object
changes to the copy dont affect the original and vice versa. imagine having a blueprint and
ink. you can change one blueprint without affecting the other.



*SHALLOW COPY:
-creates a new object but it share the internal object with the original. changes to the the neated object in the copy will also affect the original and vice versa. think of it like having two
blueprint that refer to the same set of detailed drawing.if you change a detail on one blueprint it changes on the other as well.

#4. Generate a 1x10 array with random floating-point numbers between 0 and 2. Then, round each number in the array to 2 decimal places

import numpy as np

# Generate a 6x6 array with random floating-point numbers between 0 and 255
random_array = np.random.rand(6, 6) * 255

# Round each number in the array to 2 decimal places
rounded_array = np.round(random_array, 2)

print(rounded_array)

#5.Create a NumPy array with random integers Petween w and wR of shape (., )) After creating the array
def extract_even_odd(arr):
  """
  Extracts even and odd integers from an array.

  Args:
    arr: The input array.

  Returns:
    A tuple containing two lists: even numbers and odd numbers.
  """
  even_nums = [num for num in arr if num % 2 == 0]
  odd_nums = [num for num in arr if num % 2 != 0]
  return even_nums, odd_nums

# Example usage:
my_array = [1, 2, 3, 4, 5, 6, 7, 8, 9]
even_numbers, odd_numbers = extract_even_odd(my_array)

print("Even numbers:", even_numbers)
print("Odd numbers:", odd_numbers)


 mport numpy as np

# Create a NumPy array with random integers between 1 and 10 of shape (5, 5)
random_array = np.random.randint(1, 11, size=(5, 5))

print("Original array:")
print(random_array)

# a) Extract all even integers from the array
even_integers = random_array[random_array % 2 == 0]
print("\nEven integers:")
print(even_integers)

#b) Extract all odd integers from the array
odd_integers = random_array[random_array % 2 != 0]
print("\nOdd integers:")
print(odd_integers)

#6. Create a D NumPy array of shape (, , ) containing random integers Petween w and wR Perform the
following operations:

 a) Find the indices of the maximum values along each depth level (third axis).

 b) Perform elementwise multiplication of between both arrays


 import numpy as np

# Create a 3D NumPy array of shape (3, 3, 3) with random integers between 1 and 10
random_array = np.random.randint(1, 11, size=(3, 3, 3))

print("Original array:")
print(random_array)

# a) Find the indices of the maximum values along each depth level (third axis)
max_indices = np.argmax(random_array, axis=2)
print("\nIndices of maximum values along each depth level:")
print(max_indices)

# b) Perform element-wise multiplication between the original array and itself
multiplied_array = random_array * random_array
print("\nElement-wise multiplication result:")
print(multiplied_array)

7. Clean and transform the 'Phone' column in the sample dataset to remove non-numeric characters and
convert it to a numeric data type Also display the taPle attriPutes and data types of each column

# Perform the following task using people dataset:

# a) Read the 'dataY.csv' file using pandas, skipping the first 50 rows.
import pandas as pd
df = pd.read_csv('dataY.csv', skiprows=50)

 b) Only read the columns: 'Last Name', ‘Gender’,’Email’,‘Phone’ and ‘Salary’ from the file.

 c) Display the first 10 rows of the filtered dataset.

 d) Extract the ‘Salary’' column as a Series and display its last 5 values



import pandas as pd

# a) Read the 'data.csv' file using pandas, skipping the first 50 rows.
people_df = pd.read_csv('data.csv', skiprows=50)

# b) Only read the columns: 'Last Name', ‘Gender’,’Email’,‘Phone’ and ‘Salary’ from the file.
people_df = pd.read_csv('data.csv', usecols=['Last Name', 'Gender', 'Email', 'Phone', 'Salary'])

# c) Display the first 10 rows of the filtered dataset.
print("First 10 rows:")
print(people_df.head(10))

# d) Extract the ‘Salary’ column as a Series and display its last 5 values
salary_series = people_df['Salary']
print("\nLast 5 values of Salary:")
print(salary_series.tail())

9.Filter and select rows from the People_Dataset, where the “Last Name' column contains the name 'Du\e',
'Gender' column contains the word Female and ‘Nalary’ should Pe less than _.RRR


import pandas as pd

# Assuming you have the People_Dataset loaded into a DataFrame named 'people_df'

# Filter and select rows based on the conditions
filtered_df = people_df[(people_df['Last Name'].str.contains('Duke')) &
                        (people_df['Gender'] == 'Female') &
                        (people_df['Salary'] < 60000)]

# Display the filtered DataFrame
print(filtered_df)

vQ Create a 7*. Dataframe in Pandas using a series generated from . random integers Petween w to )?

import pandas as pd
import numpy as np

# Generate a Series of 49 random integers between 1 and 50
random_series = pd.Series(np.random.randint(1, 51, size=49))

# Create a 7x7 DataFrame from the Series
df = pd.DataFrame(random_series.values.reshape(7, 7))

# Display the DataFrame
print(df)

KKg Create two different Series, each of length 50, with the following criteria:

a) The first Series should contain random numbers ranging from 10 to 50.

b) The second Series should contain random numbers ranging from 100 to 1000.

c) Create a DataFrame by 'oining these Series by column, and, change the names of the columns to 'col1', 'col2',
etc


import pandas as pd
import numpy as np

# a) Create the first Series with random numbers from 10 to 50
series1 = pd.Series(np.random.randint(10, 51, size=50))

# b) Create the second Series with random numbers from 100 to 1000
series2 = pd.Series(np.random.randint(100, 1001, size=50))

# c) Create a DataFrame by joining the Series and rename columns
df = pd.concat([series1, series2], axis=1)
df.columns = ['col1', 'col2']
print(df)

12. Perform the following operations using people data set:

a) Delete the 'Email', 'Phone', and 'Date of birth' columns from the dataset.

b) Delete the rows containing any missing values.

d) Print the final outut also


mport pandas as pd

# a) Delete the 'Ema
people_df = people_df.drop(['Email', 'Phone', 'Date of birth'], axis=1)

# b) Delete rows containing any missing values
people_df = people_df.dropna()

# d) Print the final output
print(people_df)

# Create two NumPy arrays, x and y, each containing 100 random float values between 0 and 1. Perform the
#following tasks using Matplotlib and NumPy:

#a) Create a scatter plot using x and y, setting the color of the points to red and the marker style to 'o'.
import matplotlib.pyplot as plt
import numpy as np

x = np.random.rand(100)
y = np.random.rand(100)

plt.scatter(x, y, color='red', marker='o')
plt.show()
import matplotlib.pyplot as plt
import numpy as np

x = np.random.rand(100)
y = np.random.rand(100)

plt.scatter(x, y, color='red', marker='o')
plt.show()

#b) Add a horizontal line at y = 0.5 using a dashed line style and label it as 'y = 0.5'.

#c) Add a vertical line at x = 0.5 using a dotted line style and label it as 'x = 0.5'.

#d) Label the x-axis as 'X-axis' and the y-axis as 'Y-axis'.

#e) Set the title of the lot as 'Advanced Scatter Plot of Random Values'.

#f) Dislay a legend for the scatter lot, the horizontal line, and the vertical line

import numpy as np
import matplotlib.pyplot as plt

x = np.random.rand(100)
y = np.random.rand(100)

# a) Create a scatter plot
plt.scatter(x, y, color='red', marker='o')

# b) Add a horizontal line
plt.axhline(y=0.5, linestyle='--', label='y = 0.5')

# c) Add a vertical line
plt.axvline(x=0.5, linestyle=':', label='x = 0.5')

plt.xlabel("X-axis")
plt.ylabel("Y-axis")
plt.title("Scatter Plot with Lines")
plt.legend()
plt.show()

#14. Create a time-series dataset in a Pandas DataFrame with columns: 'Date', 'Temperature', 'Humidity' and
# Perform the following tasks using Matplotlib:
# Create a NumPy array data containing 1000 samples from a normal derature and Humidity Over Time'

import pandas as pd
import numpy as np


date_rng = pd.date_range(start='1/1/2023', end='1/08/2023', freq='H')
temperature = np.random.randint(20, 30, size=len(date_rng))
humidity = np.random.randint(60, 80, size=len(date_rng))

df = pd.DataFrame({'Date': date_rng, 'Temperature': temperature, 'Humidity': humidity})
print(df)

#import matplotlib.pyplot as plt

fig, ax1 = plt.subplots()
ax1.plot(df['Date'], df['Temperature'], color='blue')
ax1.set_xlabel('Date')
ax1.set_ylabel('Temperature', color='blue')
ax1.tick_params('y', labelcolor='blue')


ax2 = ax1.twinx()
ax2.plot(df['Date'], df['Humidity'], color='red')
ax2.set_ylabel('Humidity', color='red')
ax2.tick_params('y', labelcolor='red')

plt.title('Temperature and Humidity Over Time')
plt.show()

import numpy as np
import matplotlib.pyplot as plt
data = np.random.normal(0, 1, 1000)


# (You need to specify the tasks you want to perform.
#  For example, plot a histogram, scatter plot, etc.)
# ...
# a) Plot a histogram of the data with 30 bins

import numpy as np
data = np.random.normal(size=1000)

print(data)
import matplotlib.pyplot as plt

# Plot a histogram of the data with 30 bins
plt.hist(data, bins=30)

# Show the plot
plt.show()

# Overlay a line plot representing the normal distribution's probability density function (PDF)

import matplotlib.pyplot as plt
import numpy as np
import scipy.stats as stats


# Calculate mean and standard deviation of the data
mean = np.mean(data)
std = np.std(data)


x = np.linspace(min(data), max(data), 100)
pdf = stats.norm.pdf(x, mean, std)

plt.plot(x, pdf, color='red')
plt.show()

# c) Label the x-axis as 'Value' and the y-axis as 'Frequency/Probability'.

import matplotlib.pyplot as plt
import numpy as np
import scipy.stats as statistics

plt.xlabel('Value')
plt.ylabel('Frequency/Probability')
plt.show()

# Set the title of the plot as 'Histogram with PDF Overlay'

import matplotlib.pyplot as plt
import numpy as np
import scipy.stats as stats
plt.title('Histogram with PDF Overlay')

plt.show()

# Set the title of the plot as 'Histogram with PDF Overlay'
plt.title('Histogram with PDF Overlay')


plt.show()

import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

# Create two random arrays
x = np.random.rand(50)
y = np.random.rand(50)

quadrant = []
for i in range(len(x)):
    if x[i] >= 0.5 and y[i] >= 0.5:
        quadrant.append('Quadrant I')
    elif x[i] < 0.5 and y[i] >= 0.5:
        quadrant.append('Quadrant II')
    elif x[i] < 0.5 and y[i] < 0.5:
        quadrant.append('Quadrant III')
    else:
        quadrant.append('Quadrant IV')


sns.scatterplot(x=x, y=y, hue=quadrant)

plt.legend()
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.title('Quadrant-wise Scatter Plot')


plt.show()
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

x = np.random.randn(50)
y = np.random.randn(50)

df = pd.DataFrame({'x': x, 'y': y})
df['quadrant'] = (df['x'] > 0).astype(int) + (df['y'] > 0)
sns.scatterplot(x='x', y='y', hue='quadrant', data=df, palette={0: 'red', 1: 'blue', 2: 'green', 3: 'purple'})
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.title('Quadrant-wise Scatter Plot')
plt.legend( )
plt.show()

# 18.With Bo+eh, plot a line chart of a sine wave function, add grid lines, label the axes, and set the title as 'Sine Wave Function'

import numpy as np
from bokeh.io import output_notebook, show
from bokeh.plotting import figure
X = np.linspace(-6, 6, 100)
Y = np.sin(X)
p = figure(width=600, height=400, title="Sine Wave Function", x_axis_label="X", y_axis_label="Y")
p.line(X, Y, line_width=2, color="red")
p.grid.grid_line_alpha = 0.5
output_notebook()
show(p)

#19.Using Bokeh, generate a bar chart of randomly generated categorical data, color bars based on their
#values, add hover tooltips to display exact values, label the axes, and set the title as 'Random Categorical
#Bar Chart'


import numpy as np
from bokeh.io import output_notebook, show
from bokeh.plotting import figure
from bokeh.models import HoverTool, ColumnDataSource
from bokeh.palettes import Viridis256 # import a palette for coloring the bars


categories = ['A', 'B', 'C', 'D', 'E']
values = np.random.randint(1, 20, size=5)

color = [Viridis256[int(i)] for i in values]

source = ColumnDataSource(data=dict(categories=categories, values=values, color=color))

p = figure(x_range=categories, height=400, title="Random Categorical Bar Chart",
           x_axis_label="Categories", y_axis_label="Values")

p.vbar(x='categories', top='values', width=0.8, color='color', source=source)


hover = HoverTool()
hover.tooltips = [("Category", "@categories"), ("Value", "@values")]
p.add_tools(hover)
output_notebook()
show(p)

# 20. Usin Plotly, create a basic line plot of a randomly enerated dataset, label the axes, and set the title as
# 'Simple Line Plot'
import plotly.express as px
import numpy as np

x = np.arange(10)
y = np.random.rand(10)
fig = px.line(x=x, y=y, title='Simple Line Plot')
fig.update_xaxes(title_text='X-axis')
fig.update_yaxes(title_text='Y-axis')
fig.show()

# 21. Usin Plotly, create an interactive pie chart of randomly enerated data, add labels and percentaes, set
# the title as 'Interactive Pie Chart'

import plotly.graph_objects as go
import numpy as np


labels = ['A', 'B', 'C', 'D']
values = np.random.rand(len(labels))

fig = go.Figure(data=[go.Pie(labels=labels, values=values)])

fig.update_traces(textposition='inside', textinfo='percent+label')
fig.update_layout(title='Interactive Pie Chart')
fig.show()
import plotly.express as px
import numpy as np

labels = ['A', 'B', 'C', 'D']
values = np.random.randint(1, 10, size=4)
fig = px.pie(values=values, names=labels, title='Interactive Pie Chart')

fig.update_traces(textposition='inside', textinfo='percent+label')
fig.show()

### complete data toolkit questions ###

